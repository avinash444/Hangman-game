{"version":3,"sources":["components/Title.js","components/Digits.js","components/Diagrams.js","components/GameOver.js","components/Gamewin.js","App.js","serviceWorker.js","index.js"],"names":["Title","content","missedLetters","guesses","letters","split","map","item","word","key","className","letter","ckey","data-missed","includes","Digits","props","alphabets","this","newGame","onAlphabetClick","wrd","data-content","onClick","Component","Diagram","diagramId","data-diagramId","GameOver","text","resetGame","GameWin","App","state","currentList","goodGuess","diagram","retriesLeft","finalText","movieData","getTitle","bind","fetchData","fetch","response","json","data","randomData","sort","Math","random","setState","console","log","e","target","dataset","toLowerCase","length","verifyLetter","prevState","isGameOver","filter","result","loadRest","Set","join","size","isWin","updateImage","name","test","words","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66805e88.chunk.js","sourcesContent":["import React  from 'react';\n\nconst Title = ({content,missedLetters,guesses}) => {\n    const words = content.split(/[ ,]+/)\n    const splitWrd = words.map((item) => item.split(\"\"))\n    const letters = splitWrd.map((word,key) => {\n      return (\n        <ul key={`word_${key}`} className='flex'>\n          {\n            word.map((letter,ckey) => {\n              return (\n                <li\n                  className=\"title-letter pad10\"\n                  key={`child_${ckey}`}\n                  data-missed={missedLetters.includes(letter) ? true : false}\n                >\n                <span className={guesses.includes(letter) ? 'visible':'hidden' }>\n                  {letter}\n                </span>\n               </li>\n              )\n            })\n          }\n        </ul>\n      )\n    })\n    return (\n      <div className='flex'>\n        { letters }\n      </div>\n    )\n  }\n\n  export default Title\n","import React, { Component } from 'react'\n\nexport default class Digits extends Component {\n  constructor(props) {\n    super(props)\n    this.alphabets = 'abcdefghijklmnopqrstuvwxyz'.split('')\n  }\n\n  render() {\n    const { guesses, newGame, onAlphabetClick } = this.props\n    return (\n      <div>\n        <ul className={ newGame ? 'flex' : 'none'}>\n          {\n            this.alphabets.map((wrd,key) => {\n              return (\n                <li\n                  key={`wrd_${key}`}\n                  className={guesses.includes(wrd) ? 'disable pad10 fs-22' : 'active pad10 fs-22'}\n                  data-content={wrd}\n                  onClick={onAlphabetClick}\n                  >\n                  {wrd}\n                </li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nconst Diagram = ({ diagramId }) => {\n  return (\n    <div>\n      <div data-diagramId={diagramId} className='diagram'></div>\n    </div>\n  )\n}\n\nexport default Diagram\n","import React from 'react'\n\nconst GameOver = ({newGame,text,resetGame}) => {\n  debugger;\n  return (\n    <div>\n    <div className={text === 'loose' ? 'flex' : 'none'}>\n      <div className=\"\">its an easy move you missed it</div>\n      <div className='mr-l52'>\n        <div>Retry again</div>\n        <button className='icon-reset cursor' onClick={resetGame}></button>\n      </div>\n    </div>\n    </div>\n\n  )\n}\n\nexport default GameOver\n","import React from 'react'\n\n const GameWin = ({newGame,text,resetGame}) => {\n  return (\n    <div>\n      <h2 className='fontW800'>Hangman Game</h2>\n      <p className={text === ('win' || 'loose') ? 'hidden':'visible'}>Guess the country names</p>\n      <div className={ text === 'win' ? 'flex' : 'none' }>\n        <div>hooray! you won the game</div>\n        <div className='mr-l52'>\n          <div>play another one</div>\n          <button className='icon-reset cursor' onClick={resetGame}></button>\n        </div>\n\n      </div>\n    </div>\n\n  )\n}\nexport default GameWin\n","import React, { Component } from 'react';\nimport './App.css';\nimport Title from './components/Title'\nimport Digits from './components/Digits'\nimport Diagram from './components/Diagrams'\nimport GameOver from './components/GameOver'\nimport GameWin from './components/Gamewin';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      currentList:2,\n      guesses:[],\n      missedLetters:[],\n      goodGuess:[],\n      diagram:1,\n      retriesLeft:6,\n      finalText:'',\n      movieData:[] ,\n      newGame:true\n    }\n    this.letters = /^([a-zA-Z0-9]+)$/\n    this.getTitle = this.getTitle.bind(this)\n    this.onAlphabetClick = this.onAlphabetClick.bind(this)\n    this.resetGame = this.resetGame.bind(this)\n  }\n  componentDidMount() {\n    this.fetchData()\n  }\n  async fetchData() {\n    try {\n      const response = await fetch('https://restcountries.eu/rest/v2/all');\n      let data = await response.json()\n      let randomData = data.sort(() => {\n        return 0.5 - Math.random()\n      })\n      this.setState({\n        movieData:randomData\n      })\n      }catch(error) {\n        console.log(error);\n      }\n    }\n  onAlphabetClick(e) {\n    var letter = e.target.dataset.content.toLowerCase();\n    return letter.length > 1 ? null : this.verifyLetter(letter)\n\n  }\n  updateImage() {\n    this.setState((prevState) => ({\n      diagram:prevState.diagram + 1,\n      retriesLeft:prevState.retriesLeft - 1\n    }), this.isGameOver)\n  }\n  resetGame() {\n    this.setState((prevState) => ({\n      currentList:prevState.currentList + 1,\n      diagram:1,\n      retriesLeft:6,\n      goodGuess:[],\n      missedLetters:[],\n      guesses:[],\n      newGame:true,\n      finalText:''\n    }))\n  }\n  loadRest() {\n    var missedLetters = this.getTitle().split('').filter((letter) => !this.state.guesses.includes(letter))\n    this.setState((prevState) => ({\n      missedLetters,\n      guesses:[...prevState.guesses,...missedLetters]\n    }))\n  }\n  isGameOver(result){\n    if(this.state.retriesLeft === 0) {\n      this.setState({\n        newGame:false,\n        finalText:'loose'\n      },this.loadRest)\n    }else if(result === 'win') {\n      this.setState({\n        newGame:true,\n        finalText:'win'\n      })\n    }\n  }\n  isWin() {\n    let titleSet = new Set(this.getTitle().split(/[ ,]+/).join(''))\n    if(titleSet.size === this.state.goodGuess.length) {\n        this.isGameOver('win')\n    }\n  }\n  verifyLetter(letter) {\n\n    this.setState((prevState) => ({\n      guesses:[...prevState.guesses, letter]\n    }))\n    if(!this.getTitle().includes(letter)) {\n        this.updateImage()\n    } else {\n      this.setState((prevState) => ({\n        goodGuess:[...prevState.goodGuess, letter]\n      }), this.isWin)\n    }\n\n\n  }\n  getTitle() {\n    const wordData = this.state.movieData[this.state.currentList].name\n    return wordData.split('').filter((item) => {\n      if(this.letters.test(item) || item === ' '){\n        return item\n      }\n    }).join('')\n  }\n\n  render() {\n    if(this.state.movieData.length <= 0) {\n      return (\n          <div className='hangmanApp'>\n            Please wait whe are loading the game for you...\n          </div>\n      )\n    }\n    return (\n      <div className=\"hangmanApp\">\n        <GameWin\n          newGame={this.state.newGame}\n          text={this.state.finalText}\n          resetGame={this.resetGame}\n        >\n        </GameWin>\n        <GameOver\n          newGame={this.state.newGame}\n          text={this.state.finalText}\n          resetGame={this.resetGame}\n        >\n        </GameOver>\n        <Diagram\n          diagramId={this.state.diagram}\n        />\n        <Title\n          guesses={this.state.guesses}\n          words={this.getTitle()}\n          missedLetters={this.state.missedLetters}\n        ></Title>\n      <Digits\n        newGame={this.state.newGame}\n        guesses={this.state.guesses}\n        onAlphabetClick={this.onAlphabetClick}\n      />\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}